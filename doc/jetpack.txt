jetpack.txt

================================================================================

JETPACK *jetpack*

The lightning-fast minimalist plugin manager for Vim/ Neovim. vim-jetpack is
a jetpack for the most of vimmers. Unbelievably, it is faster than vimrc uses
the built-in plugin manager only.

--------------------------------------------------------------------------------

INSTALLATION *jetpack-installation*

The installation is very simple.
You just need to download a single file and put it on the runtimepath.

https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim

The following is an example of installation with cURL command.

Vim for Linux and macOS
>
    curl -fLo ~/.vim/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim --create-dirs https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim

Neovim for Linux and macOS
>
    curl -fLo ~/.local/share/nvim/site/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim --create-dirs https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim

Vim for Windows
>
    curl -fLo %USERPROFILE%\vimfiles\pack\jetpack\opt\vim-jetpack\plugin\jetpack.vim --create-dirs https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim

Neovim for Windows
>
    curl -fLo %USERPROFILE%\AppData\Local\nvim-data\site\pack\jetpack\opt\vim-jetpack\plugin\jetpack.vim --create-dirs https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim 

--------------------------------------------------------------------------------

USAGE *jetpack-usage*

Jetpack was initially implemented as a successor of vim-plug.
Nowadays, we also provide compatibility layers for other plugin managers,
dein.vim, packer.nvim.nvim, and paq.nvim.nvim.
You can use Jetpack as a drop-in replacement of them.
In personal opinion, vim-plug style is the most stable and easy to use.

VIM-PLUG STYLE *jetpack-vim-plug*
>
    call jetpack#begin()
    Jetpack 'user/repo', { ...opts }
    call jetpack#end()

options
    `opt` *jetpack-vim-plug-opt* (`bool`):
        Lazy loading option for plugins using `packadd`.
    `dir` *jetpack-vim-plug-dir* (`string`):
        Specifies the directory where the plugin should be placed.
    `rtp` *jetpack-vim-plug-rtp* (`string`):
        Specifies the subdirectory where the plugin should be loaded.
    `do` *jetpack-vim-plug-do* (`string` or `function`):
        Executes a shell command or a function after the plugin is installed.
    `as` *jetpack-vim-plug-as* (`string`):
        Assigns an alias to the plugin.
    `on` *jetpack-vim-plug-on* (`string` or `list`):
        Loads the plugin for the given keys, command or event.
    `for` *jetpack-vim-plug-for* (`string` or `list`):
        Loads the plugin for the given filetype.
    `branch` *jetpack-vim-plug-branch* (`string`):
        Downloads the specified revision of the plugin from the branch.
    `commit` *jetpack-vim-plug-commit* (`string`):
        Downloads the specified revision of the plugin from the commit.
    `tag` *jetpack-vim-plug-tag* (`string`):
        Downloads the specified revision of the plugin from the tag.
    `frozen` *jetpack-vim-plug-frozen* (`bool`):
        Prevents the plugin from being updated.

DEIN.VIM *jetpack-dein.vim*
>
    call jetpack#begin()
    call jetpack#load_toml('path/to/plugins.toml')
    call jetpack#add('user/repo', { ... opts })
    call jetpack#end()
>
    [[plugin]]
    repo = 'user/repo'
    opt = true

    [[plugin]]
    repo = 'user/other'
    tag = 'tag-name'

options
    `opt` *jetpack-dein.vim-opt* (`bool`):
        Lazy loading option for plugins using Dein's `lazy` option.
    `path` *jetpack-dein.vim-path* (`string`):
        Specifies the directory where the plugin should be placed.
    `rtp` *jetpack-dein.vim-rtp* (`string`):
        Specifies the subdirectory where the plugin should be loaded.
    `build` *jetpack-dein.vim-build* (`string` or `function`):
        Executes a shell command or a function to build the plugin.
    `name` *jetpack-dein.vim-name* (`string`):
        Assigns a name to the plugin.
    `on_cmd` *jetpack-dein.vim-on_cmd* (`string` or `list`):
        Loads the plugin for the given command.
    `on_map` *jetpack-dein.vim-on_map* (`string` or `list`):
        Loads the plugin for the given key mapping.
    `on_event` *jetpack-dein.vim-on_event* (`string` or `list`):
        Loads the plugin for the given event.
    `on_ft` *jetpack-dein.vim-on_ft* (`string` or `list`):
        Loads the plugin for the given filetype.
    `branch` *jetpack-dein.vim-branch* (`string`):
        Downloads the specified revision of the plugin from the branch.
    `commit` *jetpack-dein.vim-commit* (`string`):
        Downloads the specified revision of the plugin from the commit.
    `tag` *jetpack-dein.vim-tag* (`string`):
        Downloads the specified revision of the plugin from the tag.
    `depends` *jetpack-dein.vim-depends* (`string` or `list`):
        Specifies the dependencies required for the plugin.
    `on_post_source` *jetpack-dein.vim-on_post_source* (`string` or `list`):
        Loads the plugin after the plugin(s) source has been loaded.
    `on_source` *jetpack-dein.vim-on_source* (`string` or `list`):
        Loads the plugin before the plugin(s) source has been loaded.
    `frozen` *jetpack-dein.vim-frozen* (`bool`):
        Prevents the plugin from being updated.
    `hook_post_source` *jetpack-dein.vim-hook_post_source* (`string`):
        Executes a code after the plugin source has been loaded.
    `hook_source` *jetpack-dein.vim-hook_source* (`string`):
        Executes a code before the plugin source has been loaded.
    `hook_add` *jetpack-dein.vim-hook_add* (`string`):
        Executes a code  after the plugin is added to the runtimepath.

PACKER.NVIM *jetpack-packer.nvim*
>
    require('jetpack.packer').startup(function(use)
      use({ 'user/repo', ... opts })
    end)

options
    `opt` *jetpack-packer.nvim-opt* (`bool`):
        Lazy loading option for plugins.
    `dir` *jetpack-packer.nvim-dir* (`string`):
        Specifies the directory where the plugin should be placed.
    `rtp` *jetpack-packer.nvim-rtp* (`string`):
        Specifies the subdirectory where the plugin should be loaded.
    `run` *jetpack-packer.nvim-run* (`string` or `function`):
        Executes a shell command or a function after the plugin is installed.
    `as` *jetpack-packer.nvim-as* (`string`):
        Assigns a different name to the plugin for use in the Vim runtimepath.
    `cmd` *jetpack-packer.nvim-cmd* (`string` or `table`):
        Loads the plugin for the given command.
    `keys` *jetpack-packer.nvim-keys* (`string` or `table`):
        Loads the plugin for the given key mapping.
    `event` *jetpack-packer.nvim-event* (`string` or `table`):
        Loads the plugin for the given event.
    `ft` *jetpack-packer.nvim-ft* (`string` or `table`):
        Loads the plugin for the given filetype.
    `branch` *jetpack-packer.nvim-branch* (`string`):
        Downloads the specified revision of the plugin from the branch.
    `commit` *jetpack-packer.nvim-commit* (`string`):
        Downloads the specified revision of the plugin from the commit.
    `tag` *jetpack-packer.nvim-tag* (`string`):
        Downloads the specified revision of the plugin from the tag.
    `requires` *jetpack-packer.nvim-requires* (`string` or `table`):
        Specifies the plugins required for the plugin.
    `after` *jetpack-packer.nvim-after* (`string` or `table`):
        Specifies the plugins that should be loaded after the plugin.
    `before` *jetpack-packer.nvim-before* (`string` or `table`):
        Specifies the plugins that should be loaded before the plugin.
    `lock` *jetpack-packer.nvim-lock* (`bool`):
        Prevents the plugin from being updated.
    `config` *jetpack-packer.nvim-config* (`string` or `function`):
        Executes a Lua code or a function after the plugin is loaded.
    `setup` *jetpack-packer.nvim-setup* (`string` or `function`):
        Executes a Lua code or a function before the plugin is loaded.

--------------------------------------------------------------------------------

API *jetpack-api*

FUNCTION *jetpack-function*

*jetpack#begin()*
    The function setups jetpack plugins. All plugin declarations should be
    placed after this function. You can give `path` if you want to use another
    directory to manage plugins.

*jetpack#add()*
    repo is a pair of string concatenated with `/` such as `tani/vim-jetpack`.
    `options` is a dictionary. See below.

*jetpack#sync()*
    The function performs to install, update, and bundle all plugins.
    The function is everything all you need to know.
    You must run this function after a change of your configuration.

*jetpack#end()*
    The function loads declared plugins. All plugin declarations should be
    placed before this function.

*jetpack#tap()*
    It returns a truthy value if the plugin is available, otherwise it
    returns a falsy value.

*jetpack#names()*
    It returns the list of plugin names registered including unavailable
    plugins.

*jetpack#get()*
    It returns metadata of the plugin if possible, otherwise it returns `{}`.
    This is the same as `dein#get` of `dein.vim`.

*jetpack#load()*
    This is a wrapper function for |:packadd|; since it fires config
    options, etc., it is recommended to use this instead of |:packadd|.

*jetpack#load_toml()*
    It loads |jetpack-dein.vim| style package configuration writtein in TOML.

LUA *jetpack-lua*

*jetpack.paq()*
    This function takes a table that is a list of plugin specifiers.

*jetpack.packer.startup()*
    This function takes a function that takes a function `use`.
    `use` takes a plugin specifier.

*jetpack.packer.add()*
    This function is an alias of |jetpack.paq()|.

*jetpack.packer.init()*
    This function takes a table associating configuration parameters.
    * `package_root` -- `$VIMHOME/pack`

VARIABLE *jetpack-variable*

*g:jetpack_download_method*
    *   The default value is `'git'`.
        Consider using `'curl'` or `'wget'`
        if `'git'` is not installed in your system.
    *   `'git'` Use `'git'` to download plugins.
    *   `'curl'` Use `'curl'` to download plugins.
    *   `'wget'` Use `'wget'` to download plugins.

*g:jetpack_njobs*
    *   The default value is `8`.
        Jetpack runs `n` commands to download plugins in parallel.

COMMAND *jetpack-command*

*JetpackSync*
    This is the command version of |jetpack#sync()|.

*Jetpack*
    This is the command version of |jetpack#add()|.

EVENT *jetpack-event*

*JetpackPre* (`User JetpackPre:{{plugin-name}}`)
*JetpackPost* (`User JetpackPost:{{plugin-name}}`)
    This event will be fired if the specified plugin is loaded.

--------------------------------------------------------------------------------

TIPS *jetpack-tips*

BOOTSTRAP *jetpack-bootstrap*

Vim
>
    let s:jetpackfile = expand('<sfile>:p:h') .. '/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim'
    let s:jetpackurl = "https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim"
    if !filereadable(s:jetpackfile)
      call system(printf('curl -fsSLo %s --create-dirs %s', s:jetpackfile, s:jetpackurl))
    endif

Neovim
>
    let s:jetpackfile = stdpath('data') .. '/site/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim'
    let s:jetpackurl = "https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim"
    if !filereadable(s:jetpackfile)
      call system(printf('curl -fsSLo %s --create-dirs %s', s:jetpackfile, s:jetpackurl))
    endif

Neovim with Lua
>
    local jetpackfile = vim.fn.stdpath('data') .. '/site/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim'
    local jetpackurl = "https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim"
    if vim.fn.filereadable(jetpackfile) == 0 then
      vim.fn.system(string.format('curl -fsSLo %s --create-dirs %s', jetpackfile, jetpackurl))
    end

AUTOMATIC-INSTALLATION *jetpack-automatic-installation*

Vim and Neovim
>
    for name in jetpack#names()
      if !jetpack#tap(name)
        call jetpack#sync()
        break
      endif
    endfor

Neovim with Lua
>
    local jetpack = require('jetpack')
    for _, name in ipairs(jetpack.names()) do
      if not jetpack.tap(name) then
        jetpack.sync()
        break
      end
    end

TREESITTER *jetpack-treesitter*

Set the different directory to download parsers.
>
     local parser_install_dir = vim.fn.stdpath "data" .. "/treesitter"
     vim.opt.runtimepath:append(parser_install_dir)
     require("nvim-treesitter.configs").setup {
         parser_install_dir = parser_install_dir,
         ...
     }
--------------------------------------------------------------------------------

LICENSE *jetpack-license*

Copyright (c) 2022 -- 2023 Masaya Taniguchi

The software is released under the MIT License,
see the header of the source code.

================================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
